Corey Schafer - Youtube Python Flask Tutorial

1. Getting started

    Files: chikinita.py

    Imports: Flask, Wheel, python3, python3-pip

    wheel - a built-package format for Python
          - setuptools
          - command line tool for wheel files
          - pip3 list  
    1. Set up Virtual Enviornment
        - python3 -m venv venv
        - source venv/bin/activate , deactivate

    2. Create your README.md file
    3. Create your .gitignore file
    4. Set up Git
        - github website create repository
        - git init
        - git add -A
        - git commit -m 'your message'
        - git remote add origin remote_repository  # sets the remote repo
        - git remote -v   # verifies the remote repo
        - git push origin master

2. Templates
    - are files that contain static data as well as placeholders for 
      dynamic data
    - is rendered with specific data to produce a final document
    - Jinja2
        anythin betwee, {{ }} is an expression that will be output of the final document
        {% and %} denotes a control flow statement like if and for, blocks are denoted by start and end tags 

    Files: (folder) Templates
           includes:
           about.html, home.html, base.html
           (folder) Static
           main.css

    Imports: from flask - render_template, url_for

    render template method - uses Jinja2
                           - name of the template and variables
                             you want to pass to the template
                             as keyword arguments

    url_for() function     - url building
                           - uses the name of the function as its
                             first argument and any number of keyword
                             arguments
                           - helps you by not having to hard code 
                             urls

    routes: index, about

3. Forms and Validation

    Install:
        - pip3 install flask-wtf

   Files: forms.py
            class RegistrationForm(FlaskForm)
            class LoginForm(FlaskForm)

          chikinita.py
            SECRET_KEY
            def register()
            def login()

   Imports: from flask_wtf import FlaskForm
            from wtforms import StringField, PasswordField, SubmitField, BooleanField
            from wtforms.validators import DataRequired, Length, Email, EqualTo
            
            - chikinita.py
            from flask import flash, redirect
            # forms.py classes
            from forms import RegistrationForm, LoginForm

    routes: register, login, methods=['GET', 'POST']

    we write python classes to represent forms and they will automatically converted into html forms

    Steps: 

    1. flask.py
    2. secret keys app.cofig - how we set config values on our app
    3. import our forms to chikinita.py
    4. create our routes, login, register in chikinita.py
    5. create 2 new files retister.html and login.html
    6. import flash and redirect
    7. update register() to include redirect and flash
    8. update base.html for the flashed messages, and redirect
    9. register.html feedback for user to tell them what they are doing wrong
    10. login.html can copy most of the register.html except username, confirm_password
   11. update chikinita.py for login error messages --> flash 
   12. In base.html update links to use url_for

4. Databases with Flask-SQLAlchemy
    
    imports: from flask_sqlalchemy import SQLAlchemy
             from datetime import datetime --> for the date on the posts

    files: chikinita.py

Steps:
    1. pip3 install flask-sqlalchemy
    2. in chikinita.py import SQLAlchemy
    3. specify URI --> where the database is located
    4. create a database instance db = SQLAlchemy(app)
    5. create our classes User, Post
    6. in our repl try the database
    
    sqlite commands:

    create_all() - will create a new site.db file
    from chikinita import User, Post  --> importing the class User, Post
    user_1 = User(username='Miguel', email='miguel@chikinita.com', password='password)
    db.session.add(user_1)    --> like git first we add the user_1 data
    db.session.commit()       --> then we write to the database
    User.query.all()
    User.query.filter_by(username='Miguel').all()
    user = User.query.filter_by(username='Miguel').first()
    user.id
    user = querry.get(1)  --> get the user_id

5. Package Structure

Files: chikinita (folder)
       chikinita/routes.py
       chikinita/__init__.py
       chikinita/routes.py

Steps:
1. Create a new folder with the same name as our application chikinita
2. Within the new chikinita folder create a __init__.py file
   When we create a __init__.py file in a folder we are telling python
   that this folder is a package.
   The __init__.py file is where we initialize our application and 
   bring together other components.
3. We will move all our imports and application initialization lines
   and move them to the __init__.py file.
4. Create a chikinita/routes.py file and move all of our route code into 
   the routes.py file



















